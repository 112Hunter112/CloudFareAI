version: '3.8'

services:
  # PostgreSQL with pgvector for embeddings
  postgres:
    image: pgvector/pgvector:pg16
    container_name: appliance_rag_db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-appliance_rag}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and Celery broker
  redis:
    image: redis:7-alpine
    container_name: appliance_rag_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MongoDB for storing raw scraped data
  mongodb:
    image: mongo:7
    container_name: appliance_rag_mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-admin}
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: appliance_rag_api
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-appliance_rag}
      - REDIS_URL=redis://redis:6379/0
      - MONGO_URL=mongodb://${MONGO_USER:-admin}:${MONGO_PASSWORD:-admin}@mongodb:27017/
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    volumes:
      - ./app:/app/app
      - ./data:/app/data
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # Celery Worker for background scraping
  celery_worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: appliance_rag_celery
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-appliance_rag}
      - REDIS_URL=redis://redis:6379/0
      - MONGO_URL=mongodb://${MONGO_USER:-admin}:${MONGO_PASSWORD:-admin}@mongodb:27017/
    depends_on:
      - redis
      - postgres
      - mongodb
    volumes:
      - ./app:/app/app
      - ./data:/app/data
    command: celery -A app.tasks worker --loglevel=info

  # Celery Beat for scheduled scraping
  celery_beat:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: appliance_rag_beat
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-appliance_rag}
      - REDIS_URL=redis://redis:6379/0
      - MONGO_URL=mongodb://${MONGO_USER:-admin}:${MONGO_PASSWORD:-admin}@mongodb:27017/
    depends_on:
      - redis
      - postgres
      - mongodb
    volumes:
      - ./app:/app/app
    command: celery -A app.tasks beat --loglevel=info

  # Flower for monitoring Celery tasks
  flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: appliance_rag_flower
    environment:
      - REDIS_URL=redis://redis:6379/0
    ports:
      - "5555:5555"
    depends_on:
      - redis
      - celery_worker
    command: celery -A app.tasks flower --port=5555

volumes:
  postgres_data:
  redis_data:
  mongo_data:
